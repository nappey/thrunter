name: Generate Threat Hunt Report

on:
  issues:
    types: [labeled]

permissions:
  issues: read
  contents: write
  pull-requests: write

jobs:
  generate-report:
    runs-on: ubuntu-latest
    if: contains(github.event.label.name, 'completed')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract Issue Data and Generate Report
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ISSUE_NUMBER: ${{ github.event.issue.number }}
        REPO_OWNER: ${{ github.repository_owner }}
        REPO_NAME: ${{ github.event.repository.name }}
      run: |
        # Get issue data using gh CLI
        ISSUE_DATA=$(gh issue view $ISSUE_NUMBER --json title,body,author,createdAt,updatedAt,url)
        
        # Extract basic information
        ISSUE_TITLE=$(echo "$ISSUE_DATA" | jq -r '.title')
        ISSUE_BODY=$(echo "$ISSUE_DATA" | jq -r '.body // ""')
        ISSUE_AUTHOR=$(echo "$ISSUE_DATA" | jq -r '.author.login')
        ISSUE_CREATED=$(echo "$ISSUE_DATA" | jq -r '.createdAt' | cut -d'T' -f1)
        ISSUE_UPDATED=$(echo "$ISSUE_DATA" | jq -r '.updatedAt' | cut -d'T' -f1)
        ISSUE_URL=$(echo "$ISSUE_DATA" | jq -r '.url')
        
        # Extract hunt name (remove prefix)
        HUNT_NAME=$(echo "$ISSUE_TITLE" | sed 's/^\[.*\] *//')
        
        # Determine hunt type
        HUNT_TYPE="General"
        if [[ "$ISSUE_TITLE" == *"[HYPOTHESIS-HUNT]"* ]]; then
          HUNT_TYPE="Hypothesis-Driven"
        elif [[ "$ISSUE_TITLE" == *"[BASELINE-HUNT]"* ]]; then
          HUNT_TYPE="Baseline Analysis"
        elif [[ "$ISSUE_TITLE" == *"[HUNT]"* ]]; then
          HUNT_TYPE="General Hunt"
        fi
        
        # Get comments using gh CLI
        COMMENTS_JSON=$(gh issue view $ISSUE_NUMBER --json comments)
        
        # Create hunter notes from comments
        HUNTER_NOTES=""
        if [[ $(echo "$COMMENTS_JSON" | jq '.comments | length') -gt 0 ]]; then
          while IFS= read -r comment; do
            AUTHOR=$(echo "$comment" | jq -r '.author.login')
            DATE=$(echo "$comment" | jq -r '.createdAt' | cut -d'T' -f1)
            BODY=$(echo "$comment" | jq -r '.body')
            
            if [[ -n "$HUNTER_NOTES" ]]; then
              HUNTER_NOTES="$HUNTER_NOTES\n\n---\n\n"
            fi
            HUNTER_NOTES="$HUNTER_NOTES**$AUTHOR** ($DATE):\n\n$BODY"
          done < <(echo "$COMMENTS_JSON" | jq -c '.comments[]')
        else
          HUNTER_NOTES="*No comments were added during the hunt.*"
        fi
        
        # Generate Hunt ID
        HUNT_ID="TH-$(echo $ISSUE_CREATED | tr -d '-')-$(printf "%03d" $ISSUE_NUMBER)"
        
        # Create sanitized filename
        SANITIZED_NAME=$(echo "$HUNT_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
        
        # Create reports directory
        mkdir -p hunt-reports
        
        # Generate filename
        FILENAME="hunt-reports/hunt-report-$ISSUE_CREATED-$ISSUE_NUMBER-$SANITIZED_NAME.md"
        
        # Function to extract field from issue body
        extract_field() {
          local field_name="$1"
          local body="$2"
          echo "$body" | awk -v field="### $field_name" '
            $0 ~ field { found=1; next }
            found && /^### / { found=0 }
            found && !/^---/ && !/^## / { print }
          ' | sed '/^[[:space:]]*$/d' | head -20
        }
        
        # Extract common fields
        PRIORITY=$(extract_field "Hunt Priority" "$ISSUE_BODY")
        if [[ -z "$PRIORITY" ]]; then
          PRIORITY=$(extract_field "Priority Level" "$ISSUE_BODY")
        fi
        if [[ -z "$PRIORITY" ]]; then
          PRIORITY="Not specified"
        fi
        
        DURATION=$(extract_field "Estimated Hunt Duration" "$ISSUE_BODY")
        if [[ -z "$DURATION" ]]; then
          DURATION=$(extract_field "Expected Hunt Duration" "$ISSUE_BODY")
        fi
        if [[ -z "$DURATION" ]]; then
          DURATION="Not specified"
        fi
        
        # Extract data sources (checked boxes)
        DATA_SOURCES=$(echo "$ISSUE_BODY" | grep -A 50 "### Required Data Sources" | grep "- \[x\]" | sed 's/- \[x\] /- /' | head -20)
        if [[ -z "$DATA_SOURCES" ]]; then
          DATA_SOURCES=$(echo "$ISSUE_BODY" | grep -A 50 "### Required Data Sources for Baseline" | grep "- \[x\]" | sed 's/- \[x\] /- /' | head -20)
        fi
        if [[ -z "$DATA_SOURCES" ]]; then
          DATA_SOURCES="*No specific data sources were documented.*"
        fi

        REPORT_TEXT = "# Threat Hunt Report: HUNT_NAME_PLACEHOLDER

        **Hunt ID:** HUNT_ID_PLACEHOLDER  
        **Hunt Type:** HUNT_TYPE_PLACEHOLDER  
        **Issue Number:** [#ISSUE_NUMBER_PLACEHOLDER](ISSUE_URL_PLACEHOLDER)  
        **Hunt Lead:** ISSUE_AUTHOR_PLACEHOLDER  
        **Date Created:** ISSUE_CREATED_PLACEHOLDER  
        **Date Completed:** ISSUE_UPDATED_PLACEHOLDER  
        **Priority:** PRIORITY_PLACEHOLDER  
        **Estimated Duration:** DURATION_PLACEHOLDER  

        ---

        ## Executive Summary

        This report documents the completion of the "HUNT_NAME_PLACEHOLDER" threat hunt, conducted as part of our proactive threat hunting program. The hunt was initiated on ISSUE_CREATED_PLACEHOLDER and completed on ISSUE_UPDATED_PLACEHOLDER.

        ## Hunt Details

        ### Original Hunt Request Information

        The following information was extracted from the original GitHub issue:

        ```
        ISSUE_BODY_PLACEHOLDER
        ```

        ## Data Sources Utilized

        DATA_SOURCES_PLACEHOLDER

        ## Hunter Notes

        The following section contains comments, observations, and notes from the hunting team during the course of this investigation:

        HUNTER_NOTES_PLACEHOLDER

        ---

        ## Findings & Results

        > **Note:** This section should be manually updated with actual hunt findings, evidence, and conclusions.

        ### Key Findings
        - [ ] **Finding 1:** [Description of finding]
          - **Evidence:** [Supporting evidence]
          - **Impact:** [Assessment of impact]
          - **Confidence:** [High/Medium/Low]

        - [ ] **Finding 2:** [Description of finding]
          - **Evidence:** [Supporting evidence]
          - **Impact:** [Assessment of impact]
          - **Confidence:** [High/Medium/Low]

        ### Evidence Collected
        - [ ] [Evidence item 1 - file paths, logs, screenshots]
        - [ ] [Evidence item 2 - network captures, memory dumps]
        - [ ] [Evidence item 3 - timeline data, correlation results]

        ### Indicators of Compromise (IOCs)
        - [ ] **IP Addresses:** [List any malicious or suspicious IPs]
        - [ ] **Domains:** [List any malicious or suspicious domains]
        - [ ] **File Hashes:** [List any malicious file hashes (MD5, SHA1, SHA256)]
        - [ ] **Process Names:** [List any suspicious processes or renamed legitimate tools]
        - [ ] **Registry Keys:** [List any suspicious registry modifications]
        - [ ] **User Accounts:** [List any compromised or suspicious accounts]

        ## Hunt Results & Conclusions

        ### Hunt Outcome
        - [ ] **Successful** - Hunt objectives fully met, clear conclusions reached
        - [ ] **Partially Successful** - Some objectives met, limited conclusions
        - [ ] **Inconclusive** - Unable to reach definitive conclusions
        - [ ] **No Findings** - No suspicious activity detected

        ### Risk Assessment
        - [ ] **No Risk Identified** - No malicious activity found, environment appears clean
        - [ ] **Low Risk** - Minor security gaps or configuration issues identified
        - [ ] **Medium Risk** - Moderate security concerns requiring attention
        - [ ] **High Risk** - Significant security issues requiring immediate action
        - [ ] **Critical Risk** - Active compromise or imminent threat detected

        ### Confidence Level
        - [ ] **High Confidence (90-100%)** - Multiple corroborating sources, strong evidence
        - [ ] **Medium Confidence (70-89%)** - Good evidence with minor gaps
        - [ ] **Low Confidence (50-69%)** - Limited or circumstantial evidence
        - [ ] **Very Low Confidence (<50%)** - Insufficient evidence for conclusions

        ## Recommendations & Next Steps

        ### Immediate Actions (0-24 hours)
        - [ ] [Urgent security action item 1]
        - [ ] [Urgent security action item 2]
        - [ ] [Evidence preservation tasks]
        - [ ] [Stakeholder notifications]

        ### Short-term Actions (1-7 days)
        - [ ] [Investigation expansion or validation]
        - [ ] [Security control implementations]
        - [ ] [Process improvements]
        - [ ] [Team training or awareness]

        ### Long-term Actions (1+ weeks)
        - [ ] [Strategic security improvements]
        - [ ] [Technology investments]
        - [ ] [Policy or procedure updates]
        - [ ] [Program enhancements]

        ## Detection & Response Improvements

        ### New Detection Rules Created
        - [ ] **Rule 1:** [Description and purpose]
          - **Logic:** [Detection logic or query]
          - **Tuning:** [Threshold or filtering requirements]

        - [ ] **Rule 2:** [Description and purpose]
          - **Logic:** [Detection logic or query]
          - **Tuning:** [Threshold or filtering requirements]

        ### Enhanced Monitoring
        - [ ] [New log source or data collection]
        - [ ] [Improved alerting or notification]
        - [ ] [Dashboard or visualization updates]
        - [ ] [Baseline or threshold adjustments]

        ### Process Improvements
        - [ ] [Hunt methodology refinements]
        - [ ] [Investigation procedure updates]
        - [ ] [Communication or escalation improvements]
        - [ ] [Documentation or knowledge sharing enhancements]

        ## Lessons Learned

        ### What Worked Well
        - [Effective hunting technique or approach]
        - [Useful data source or tool]
        - [Good team coordination or communication]
        - [Successful methodology or process]

        ### Areas for Improvement
        - [Data gap or collection limitation identified]
        - [Tool limitation or performance issue]
        - [Process inefficiency or bottleneck]
        - [Skill gap or training need]

        ### Future Hunt Recommendations
        - [Suggestion for follow-up hunts]
        - [Methodology improvement for similar hunts]
        - [Additional data sources to consider]
        - [New hunting techniques to explore]

        ## Hunt Metrics & Performance

        - **Total Hunt Duration:** [X hours/days]
        - **Data Volume Analyzed:** [X GB/TB processed]
        - **Systems Examined:** [X endpoints/servers]
        - **Time Period Covered:** [X days/weeks/months]
        - **Queries Executed:** [X searches/investigations]
        - **False Positive Rate:** [X% - alerts that were benign]
        - **True Positives Found:** [X confirmed security issues]
        - **Mean Time to Detection:** [X hours/days]
        - **Mean Time to Investigation:** [X hours/days]

        ---

        ## Report Metadata

        **Report Generated:** $(date +%Y-%m-%d)  
        **Generated By:** GitHub Action (Threat Hunt Report Generator)  
        **Source Issue:** [#ISSUE_NUMBER_PLACEHOLDER](ISSUE_URL_PLACEHOLDER)  
        **Last Updated:** $(date -u +%Y-%m-%dT%H:%M:%S)Z  

        ---

        *This report was automatically generated from GitHub Issue data and hunter comments. Please review and update the Findings, Conclusions, and Recommendations sections with actual hunt results before finalizing.*"
        
        # Create the report
        cat > "$FILENAME" << 'REPORT_EOF'
        $REPORT_TEXT
        REPORT_EOF 
        
        # Substitute variables in the file using safer approach
        sed -i "s/HUNT_NAME_PLACEHOLDER/$HUNT_NAME/g" "$FILENAME"
        sed -i "s/HUNT_ID_PLACEHOLDER/$HUNT_ID/g" "$FILENAME"
        sed -i "s/HUNT_TYPE_PLACEHOLDER/$HUNT_TYPE/g" "$FILENAME"
        sed -i "s/ISSUE_NUMBER_PLACEHOLDER/$ISSUE_NUMBER/g" "$FILENAME"
        sed -i "s|ISSUE_URL_PLACEHOLDER|$ISSUE_URL|g" "$FILENAME"
        sed -i "s/ISSUE_AUTHOR_PLACEHOLDER/$ISSUE_AUTHOR/g" "$FILENAME"
        sed -i "s/ISSUE_CREATED_PLACEHOLDER/$ISSUE_CREATED/g" "$FILENAME"
        sed -i "s/ISSUE_UPDATED_PLACEHOLDER/$ISSUE_UPDATED/g" "$FILENAME"
        sed -i "s/PRIORITY_PLACEHOLDER/$PRIORITY/g" "$FILENAME"
        sed -i "s/DURATION_PLACEHOLDER/$DURATION/g" "$FILENAME"
        
        # Handle multi-line substitutions more safely
        echo "Substituting issue body..."
        # Create temp file for issue body
        echo "$ISSUE_BODY" > /tmp/issue_body.txt
        awk '
          /ISSUE_BODY_PLACEHOLDER/ { 
            while ((getline line < "/tmp/issue_body.txt") > 0) print line
            close("/tmp/issue_body.txt")
            next 
          }
          { print }
        ' "$FILENAME" > "${FILENAME}.tmp" && mv "${FILENAME}.tmp" "$FILENAME"
        
        echo "Substituting data sources..."
        echo "$DATA_SOURCES" > /tmp/data_sources.txt
        awk '
          /DATA_SOURCES_PLACEHOLDER/ { 
            while ((getline line < "/tmp/data_sources.txt") > 0) print line
            close("/tmp/data_sources.txt")
            next 
          }
          { print }
        ' "$FILENAME" > "${FILENAME}.tmp" && mv "${FILENAME}.tmp" "$FILENAME"
        
        echo "Substituting hunter notes..."
        echo "$HUNTER_NOTES" > /tmp/hunter_notes.txt
        awk '
          /HUNTER_NOTES_PLACEHOLDER/ { 
            while ((getline line < "/tmp/hunter_notes.txt") > 0) print line
            close("/tmp/hunter_notes.txt")
            next 
          }
          { print }
        ' "$FILENAME" > "${FILENAME}.tmp" && mv "${FILENAME}.tmp" "$FILENAME"
        
        # Clean up temp files
        rm -f /tmp/issue_body.txt /tmp/data_sources.txt /tmp/hunter_notes.txt
        
        echo "Generated threat hunt report: $FILENAME"
        
        # Store filename for next step
        echo "REPORT_FILENAME=$FILENAME" >> $GITHUB_ENV

    - name: Commit Report
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add hunt-reports/
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Generate threat hunt report for issue #${{ github.event.issue.number }}: ${{ github.event.issue.title }}"
          git push
        fi

    - name: Comment on Issue
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ISSUE_NUMBER: ${{ github.event.issue.number }}
      run: |
        COMMENT_TEXT="🎯 **Threat Hunt Report Generated**

        A comprehensive hunt report has been automatically generated and saved to: \`$REPORT_FILENAME\`

        The report includes:
        - Hunt details and metadata extracted from the issue
        - All comments as "Hunter Notes"
        - Template sections for findings and conclusions
        - Recommendations and next steps

        Please review and update the report with actual hunt findings, evidence, and conclusions.

        📄 [View the generated report]($REPORT_FILENAME)"
        COMMENT_BODY=$(cat << 'EOF'
        $COMMENT_TEXT
        EOF)
        
        # Substitute the filename
        COMMENT_BODY=$(echo "$COMMENT_BODY" | sed "s|\$REPORT_FILENAME|$REPORT_FILENAME|g")
        
        # Post comment using gh CLI
        echo "$COMMENT_BODY" | gh issue comment $ISSUE_NUMBER --body-file -
